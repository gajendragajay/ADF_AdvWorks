{
	"name": "CreateCSVForFactInternetSales",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SalesSalesOrderDetail",
						"type": "DatasetReference"
					},
					"name": "Source"
				},
				{
					"dataset": {
						"referenceName": "FactInternetSalesDW",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "stagingdatalake",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Filter1"
				},
				{
					"name": "Join1"
				}
			],
			"script": "source(output(\n\t\tProductKey as integer,\n\t\tOrderDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tShipDateKey as integer,\n\t\tCustomerKey as integer,\n\t\tSalesOrderNumber as string,\n\t\tSalesOrderLineNumber as long,\n\t\tRevisionNumber as integer,\n\t\tOrderQty as short,\n\t\tUnitPrice as decimal(19,4),\n\t\tExtendedAmount as decimal(19,4),\n\t\tUnitPriceDiscountPct as decimal(19,4),\n\t\tDiscountAmount as decimal(38,6),\n\t\tProductStandardCost as decimal(19,4),\n\t\tTotalProductCost as decimal(38,6),\n\t\tSalesAmount as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tCarrierTrackingNumber as string,\n\t\tCustomerPONumber as string,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT \\n       sod.[ProductID] as [ProductKey]\\n\t  ,cast(convert(varchar,soh.[OrderDate],112) as int) as [OrderDateKey]\\n\t  ,cast(convert(varchar,soh.[DueDate],112) as int) as [DueDateKey]\\n\t  ,cast(convert(varchar,soh.[ShipDate],112) as int) as [ShipDateKey]\\n      ,soh.[CustomerID] as [CustomerKey]\\n\t  ,soh.[SalesOrderNumber]\\n\t  ,ROW_NUMBER() OVER (partition by soh.[SalesOrderNumber] order by soh.[SalesOrderNumber]) AS [SalesOrderLineNumber]\\n      ,soh.[RevisionNumber]\\n      ,sod.[OrderQty]\\n      ,sod.[UnitPrice]\\n\t  ,soh.[TotalDue] as [ExtendedAmount]\\n      ,sod.[UnitPriceDiscount] as [UnitPriceDiscountPct]\\n\t  ,(sod.[UnitPriceDiscount]*sod.[LineTotal]) as [DiscountAmount]\\n\t  ,pp.[StandardCost] as [ProductStandardCost] \\n      ,sod.[LineTotal] as [TotalProductCost] \\n      ,soh.[SubTotal] as [SalesAmount]\\n      ,soh.[TaxAmt]\\n      ,soh.[Freight]\\n      ,sod.[CarrierTrackingNumber]\\n\t  ,soh.[PurchaseOrderNumber] as [CustomerPONumber]\\n      ,soh.[OrderDate]   \\n      ,soh.[DueDate]\\n      ,soh.[ShipDate]\\n       \\n  FROM [Sales].[SalesOrderHeader] soh\\n  INNER JOIN [Sales].[SalesOrderDetail] sod\\n  ON soh.[SalesOrderID] = sod.[SalesOrderID]\\n  INNER JOIN [Production].[Product] pp\\n  ON pp.[ProductID] = sod.[ProductID]\\n  where soh.[SalesPersonID] is null and soh.[OnlineOrderFlag]=1',\n\tformat: 'query') ~> Source\nsource(output(\n\t\tMaxOrderDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select isNull(max(OrderDate),0) as [MaxOrderDate] from [dbo].[FactInternetSales]',\n\tformat: 'query') ~> source1\nJoin1 filter(OrderDate > MaxOrderDate) ~> Filter1\nSource, source1 join(true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[('FactInternetSales'+ '_' + toString(currentDate(),'ddMMYYYY') + '.csv' )],\n\tmapColumn(\n\t\tProductKey,\n\t\tOrderDateKey,\n\t\tDueDateKey,\n\t\tShipDateKey,\n\t\tCustomerKey,\n\t\tSalesOrderNumber,\n\t\tSalesOrderLineNumber,\n\t\tRevisionNumber,\n\t\tOrderQty,\n\t\tUnitPrice,\n\t\tExtendedAmount,\n\t\tUnitPriceDiscountPct,\n\t\tDiscountAmount,\n\t\tProductStandardCost,\n\t\tTotalProductCost,\n\t\tSalesAmount,\n\t\tTaxAmt,\n\t\tFreight,\n\t\tCarrierTrackingNumber,\n\t\tCustomerPONumber,\n\t\tOrderDate,\n\t\tDueDate,\n\t\tShipDate\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}