{
	"name": "DimProductsCSVTODW",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DimProductCSV",
						"type": "DatasetReference"
					},
					"name": "CSV"
				},
				{
					"dataset": {
						"referenceName": "DimProductDW",
						"type": "DatasetReference"
					},
					"name": "TargetDimProduct"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimProductDW",
						"type": "DatasetReference"
					},
					"name": "DimProductsCSV"
				}
			],
			"transformations": [
				{
					"name": "SizeRange"
				},
				{
					"name": "Exists1"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "Hash"
				},
				{
					"name": "TargetHash"
				},
				{
					"name": "FillNulls"
				}
			],
			"script": "source(output(\n\t\tProductKey as integer,\n\t\tProductAlternateKey as string,\n\t\tProductSubcategoryKey as integer,\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tStandardCost as double,\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as short,\n\t\tReorderPoint as short,\n\t\tListPrice as double,\n\t\tSize as string,\n\t\tWeight as double,\n\t\tDaysToManufacture as short,\n\t\tProductLine as string,\n\t\tDealerPrice as double,\n\t\tClass as string,\n\t\tStyle as string,\n\t\tModelName as string,\n\t\tEnglishDescription as string,\n\t\tStartDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['staging','processedFiles'],\n\twildcardPaths:['staging/DimProduct*.csv']) ~> CSV\nsource(output(\n\t\tProductKey as integer,\n\t\tProductAlternateKey as string,\n\t\tProductSubcategoryKey as integer,\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tStandardCost as decimal(19,4),\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as short,\n\t\tReorderPoint as short,\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tSizeRange as string,\n\t\tWeight as double,\n\t\tDaysToManufacture as integer,\n\t\tProductLine as string,\n\t\tDealerPrice as decimal(19,4),\n\t\tClass as string,\n\t\tStyle as string,\n\t\tModelName as string,\n\t\tEnglishDescription as string,\n\t\tStartDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TargetDimProduct\nCSV derive(SizeRange = iif(Size == 'M', 'M', iif(Size == 'L', 'L', iif(Size == 'S', 'S', iif(Size == 'XL', 'XL',iif(Size == '58', '54-58 CM', iif(Size == '62', '60-62 CM', iif(Size == '44', '42-46 CM', iif(Size == '48', '48-52 CM', iif(Size == '52', '48-52 CM', iif(Size == '56', '54-58 CM', iif(Size == '60', '60-62 CM', iif(Size == '42', '42-46 CM', iif(Size == '46', '42-46 CM', iif(Size == '38', '38-40 CM', iif(Size == '40', '38-40 CM', iif(Size == '70', '70', iif(Size == '50', '48-52 CM', iif(Size == '54', '54-58 CM', 'NA')))))))))))))) ))))) ~> SizeRange\nHash, TargetHash exists(Hash@HashKey == TargetHash@HashKey,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists1\nFillNulls alterRow(upsertIf(true())) ~> AlterRow1\nSizeRange derive(HashKey = sha1(ProductKey,ProductAlternateKey,ProductSubcategoryKey,WeightUnitMeasureCode,SizeUnitMeasureCode,EnglishProductName,StandardCost,FinishedGoodsFlag,Color,SafetyStockLevel,ReorderPoint,ListPrice,Size,Weight,DaysToManufacture,ProductLine,DealerPrice,Class,Style,ModelName,EnglishDescription,StartDate,SizeRange)) ~> Hash\nTargetDimProduct derive(HashKey = sha1(ProductKey,ProductAlternateKey,ProductSubcategoryKey,WeightUnitMeasureCode,SizeUnitMeasureCode,EnglishProductName,StandardCost,FinishedGoodsFlag,Color,SafetyStockLevel,ReorderPoint,ListPrice,Size,Weight,DaysToManufacture,ProductLine,DealerPrice,Class,Style,ModelName,EnglishDescription,StartDate,SizeRange)) ~> TargetHash\nExists1 derive(EnglishProductName = iifNull(EnglishProductName, '-', EnglishProductName),\n\t\tFinishedGoodsFlag = iifNull(FinishedGoodsFlag, false(), true()),\n\t\tColor = iifNull(Color, '-', Color)) ~> FillNulls\nAlterRow1 sink(input(\n\t\tProductKey as integer,\n\t\tProductAlternateKey as string,\n\t\tProductSubcategoryKey as integer,\n\t\tWeightUnitMeasureCode as string,\n\t\tSizeUnitMeasureCode as string,\n\t\tEnglishProductName as string,\n\t\tStandardCost as decimal(19,4),\n\t\tFinishedGoodsFlag as boolean,\n\t\tColor as string,\n\t\tSafetyStockLevel as short,\n\t\tReorderPoint as short,\n\t\tListPrice as decimal(19,4),\n\t\tSize as string,\n\t\tSizeRange as string,\n\t\tWeight as double,\n\t\tDaysToManufacture as integer,\n\t\tProductLine as string,\n\t\tDealerPrice as decimal(19,4),\n\t\tClass as string,\n\t\tStyle as string,\n\t\tModelName as string,\n\t\tEnglishDescription as string,\n\t\tStartDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['ProductKey'],\n\tformat: 'table',\n\tpreSQLs:['\\nSET IDENTITY_INSERT [gajendra_AdvWorksDW].[dbo].[DimProduct] ON;'],\n\tpostSQLs:['\\nSET IDENTITY_INSERT [gajendra_AdvWorksDW].[dbo].[DimProduct] OFF;'],\n\tmapColumn(\n\t\tProductKey,\n\t\tProductAlternateKey,\n\t\tProductSubcategoryKey,\n\t\tWeightUnitMeasureCode,\n\t\tSizeUnitMeasureCode,\n\t\tEnglishProductName,\n\t\tStandardCost,\n\t\tFinishedGoodsFlag,\n\t\tColor,\n\t\tSafetyStockLevel,\n\t\tReorderPoint,\n\t\tListPrice,\n\t\tSize,\n\t\tSizeRange,\n\t\tWeight,\n\t\tDaysToManufacture,\n\t\tProductLine,\n\t\tDealerPrice,\n\t\tClass,\n\t\tStyle,\n\t\tModelName,\n\t\tEnglishDescription,\n\t\tStartDate\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimProductsCSV"
		}
	}
}